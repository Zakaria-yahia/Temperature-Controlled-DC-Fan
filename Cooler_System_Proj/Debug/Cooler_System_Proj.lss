
Cooler_System_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000ba0  00000c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112a  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c83  00000000  00000000  000028aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000825  00000000  00000000  00003cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_10>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  8a:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_int>:
 * Author : Zakaria yahia
 */
#include "ADC.h"

void ADC_int(void){
	SETBIT(ADMUX,REFS0); // AVCC will be the ref.
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	SETBIT(ADCSRA,ADEN); // enable ADC
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS0);
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	81 60       	ori	r24, 0x01	; 1
  a2:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS1);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	86 b9       	out	0x06, r24	; 6
	SETBIT(ADCSRA,ADPS2);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	08 95       	ret

000000b2 <ADC_read>:
	
}

uint16_t ADC_read(void){
	
	SETBIT(ADCSRA,ADSC); // start single conversion
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	86 b9       	out	0x06, r24	; 6
	while(READBIT(ADCSRA,ADSC) == 1); // conversion not completed
  b8:	36 99       	sbic	0x06, 6	; 6
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <ADC_read+0x6>
	
	return  ADC;
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	95 b1       	in	r25, 0x05	; 5
}
  c0:	08 95       	ret

000000c2 <LCD_write_command>:
* Purpose      : write command to lcd
* Parameters   : data: one of LCD commands 
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t data){ // 0x53
	RS(0);
  c2:	98 b3       	in	r25, 0x18	; 24
  c4:	97 7f       	andi	r25, 0xF7	; 247
  c6:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(data,7)); // Data bit7  = D7  
  c8:	88 23       	and	r24, r24
  ca:	24 f4       	brge	.+8      	; 0xd4 <LCD_write_command+0x12>
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	98 bb       	out	0x18, r25	; 24
  d2:	03 c0       	rjmp	.+6      	; 0xda <LCD_write_command+0x18>
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	9f 77       	andi	r25, 0x7F	; 127
  d8:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,6)); // Data bit6  = D6  
  da:	86 ff       	sbrs	r24, 6
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <LCD_write_command+0x24>
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	90 64       	ori	r25, 0x40	; 64
  e2:	98 bb       	out	0x18, r25	; 24
  e4:	03 c0       	rjmp	.+6      	; 0xec <LCD_write_command+0x2a>
  e6:	98 b3       	in	r25, 0x18	; 24
  e8:	9f 7b       	andi	r25, 0xBF	; 191
  ea:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,5)); // Data bit5  = D5  
  ec:	85 ff       	sbrs	r24, 5
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <LCD_write_command+0x36>
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	90 62       	ori	r25, 0x20	; 32
  f4:	98 bb       	out	0x18, r25	; 24
  f6:	03 c0       	rjmp	.+6      	; 0xfe <LCD_write_command+0x3c>
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 7d       	andi	r25, 0xDF	; 223
  fc:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,4)); // Data bit4  = D4
  fe:	84 ff       	sbrs	r24, 4
 100:	04 c0       	rjmp	.+8      	; 0x10a <LCD_write_command+0x48>
 102:	98 b3       	in	r25, 0x18	; 24
 104:	90 61       	ori	r25, 0x10	; 16
 106:	98 bb       	out	0x18, r25	; 24
 108:	03 c0       	rjmp	.+6      	; 0x110 <LCD_write_command+0x4e>
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	9f 7e       	andi	r25, 0xEF	; 239
 10e:	98 bb       	out	0x18, r25	; 24
	EN(1);
 110:	98 b3       	in	r25, 0x18	; 24
 112:	94 60       	ori	r25, 0x04	; 4
 114:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ef e9       	ldi	r30, 0x9F	; 159
 118:	ff e0       	ldi	r31, 0x0F	; 15
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_write_command+0x58>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_write_command+0x5e>
 120:	00 00       	nop
	_delay_ms(1);
	EN(0);
 122:	98 b3       	in	r25, 0x18	; 24
 124:	9b 7f       	andi	r25, 0xFB	; 251
 126:	98 bb       	out	0x18, r25	; 24
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_write_command+0x6a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_write_command+0x70>
 132:	00 00       	nop
	_delay_ms(1);
	
	D7(READBIT(data,3)); // Data bit3  = D7
 134:	83 ff       	sbrs	r24, 3
 136:	04 c0       	rjmp	.+8      	; 0x140 <LCD_write_command+0x7e>
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	90 68       	ori	r25, 0x80	; 128
 13c:	98 bb       	out	0x18, r25	; 24
 13e:	03 c0       	rjmp	.+6      	; 0x146 <LCD_write_command+0x84>
 140:	98 b3       	in	r25, 0x18	; 24
 142:	9f 77       	andi	r25, 0x7F	; 127
 144:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,2)); // Data bit2  = D6
 146:	82 ff       	sbrs	r24, 2
 148:	04 c0       	rjmp	.+8      	; 0x152 <LCD_write_command+0x90>
 14a:	98 b3       	in	r25, 0x18	; 24
 14c:	90 64       	ori	r25, 0x40	; 64
 14e:	98 bb       	out	0x18, r25	; 24
 150:	03 c0       	rjmp	.+6      	; 0x158 <LCD_write_command+0x96>
 152:	98 b3       	in	r25, 0x18	; 24
 154:	9f 7b       	andi	r25, 0xBF	; 191
 156:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,1)); // Data bit1  = D5
 158:	81 ff       	sbrs	r24, 1
 15a:	04 c0       	rjmp	.+8      	; 0x164 <LCD_write_command+0xa2>
 15c:	98 b3       	in	r25, 0x18	; 24
 15e:	90 62       	ori	r25, 0x20	; 32
 160:	98 bb       	out	0x18, r25	; 24
 162:	03 c0       	rjmp	.+6      	; 0x16a <LCD_write_command+0xa8>
 164:	98 b3       	in	r25, 0x18	; 24
 166:	9f 7d       	andi	r25, 0xDF	; 223
 168:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,0)); // Data bit0  = D4
 16a:	80 ff       	sbrs	r24, 0
 16c:	04 c0       	rjmp	.+8      	; 0x176 <LCD_write_command+0xb4>
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	80 61       	ori	r24, 0x10	; 16
 172:	88 bb       	out	0x18, r24	; 24
 174:	03 c0       	rjmp	.+6      	; 0x17c <LCD_write_command+0xba>
 176:	88 b3       	in	r24, 0x18	; 24
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	88 bb       	out	0x18, r24	; 24
	EN(1);
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	88 bb       	out	0x18, r24	; 24
 182:	8f e9       	ldi	r24, 0x9F	; 159
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_write_command+0xc4>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_write_command+0xca>
 18c:	00 00       	nop
	_delay_ms(1);
	EN(0);
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	88 bb       	out	0x18, r24	; 24
 194:	ef e9       	ldi	r30, 0x9F	; 159
 196:	ff e0       	ldi	r31, 0x0F	; 15
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_write_command+0xd6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_write_command+0xdc>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <LCD_init>:
* Purpose      : Init lcd in 4 bit mode, clear lcd and turn off cursor
* Parameters   : void 
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PIN;
 1a2:	87 b3       	in	r24, 0x17	; 23
 1a4:	8c 6f       	ori	r24, 0xFC	; 252
 1a6:	87 bb       	out	0x17, r24	; 23
	LCD_write_command(0x3);
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
 1ae:	8f e7       	ldi	r24, 0x7F	; 127
 1b0:	9e e3       	ldi	r25, 0x3E	; 62
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_init+0x10>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_init+0x16>
 1b8:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
 1c0:	8f e7       	ldi	r24, 0x7F	; 127
 1c2:	9e e3       	ldi	r25, 0x3E	; 62
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_init+0x22>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_init+0x28>
 1ca:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
 1d2:	8f e7       	ldi	r24, 0x7F	; 127
 1d4:	9e e3       	ldi	r25, 0x3E	; 62
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_init+0x34>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_init+0x3a>
 1dc:	00 00       	nop
	_delay_ms(4);
	
	LCD_write_command(0x2);
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
	LCD_write_command(0x28);
 1e4:	88 e2       	ldi	r24, 0x28	; 40
 1e6:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
	LCD_write_command(0x08);
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
	LCD_write_command(0x1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
	LCD_write_command(0x6);
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
	LCD_write_command(0xc);
 1fc:	8c e0       	ldi	r24, 0x0C	; 12
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	29 ef       	ldi	r18, 0xF9	; 249
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	91 50       	subi	r25, 0x01	; 1
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <LCD_init+0x66>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_init+0x70>
 212:	00 00       	nop
 214:	08 95       	ret

00000216 <LCD_write_data>:
* Purpose      : write symbol on lcd
* Parameters   : data: Ascii value of specific symbol
* Return value : void
*****************************************************************************/
void LCD_write_data(uint8_t data){ // 0x53
	RS(1);
 216:	98 b3       	in	r25, 0x18	; 24
 218:	98 60       	ori	r25, 0x08	; 8
 21a:	98 bb       	out	0x18, r25	; 24
	D7(READBIT(data,7)); // Data bit7  = D7
 21c:	88 23       	and	r24, r24
 21e:	24 f4       	brge	.+8      	; 0x228 <LCD_write_data+0x12>
 220:	98 b3       	in	r25, 0x18	; 24
 222:	90 68       	ori	r25, 0x80	; 128
 224:	98 bb       	out	0x18, r25	; 24
 226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_write_data+0x18>
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	9f 77       	andi	r25, 0x7F	; 127
 22c:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,6)); // Data bit6  = D6
 22e:	86 ff       	sbrs	r24, 6
 230:	04 c0       	rjmp	.+8      	; 0x23a <LCD_write_data+0x24>
 232:	98 b3       	in	r25, 0x18	; 24
 234:	90 64       	ori	r25, 0x40	; 64
 236:	98 bb       	out	0x18, r25	; 24
 238:	03 c0       	rjmp	.+6      	; 0x240 <LCD_write_data+0x2a>
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	9f 7b       	andi	r25, 0xBF	; 191
 23e:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,5)); // Data bit5  = D5
 240:	85 ff       	sbrs	r24, 5
 242:	04 c0       	rjmp	.+8      	; 0x24c <LCD_write_data+0x36>
 244:	98 b3       	in	r25, 0x18	; 24
 246:	90 62       	ori	r25, 0x20	; 32
 248:	98 bb       	out	0x18, r25	; 24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <LCD_write_data+0x3c>
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	9f 7d       	andi	r25, 0xDF	; 223
 250:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,4)); // Data bit4  = D4
 252:	84 ff       	sbrs	r24, 4
 254:	04 c0       	rjmp	.+8      	; 0x25e <LCD_write_data+0x48>
 256:	98 b3       	in	r25, 0x18	; 24
 258:	90 61       	ori	r25, 0x10	; 16
 25a:	98 bb       	out	0x18, r25	; 24
 25c:	03 c0       	rjmp	.+6      	; 0x264 <LCD_write_data+0x4e>
 25e:	98 b3       	in	r25, 0x18	; 24
 260:	9f 7e       	andi	r25, 0xEF	; 239
 262:	98 bb       	out	0x18, r25	; 24
	EN(1);
 264:	98 b3       	in	r25, 0x18	; 24
 266:	94 60       	ori	r25, 0x04	; 4
 268:	98 bb       	out	0x18, r25	; 24
 26a:	ef e9       	ldi	r30, 0x9F	; 159
 26c:	ff e0       	ldi	r31, 0x0F	; 15
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_write_data+0x58>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_write_data+0x5e>
 274:	00 00       	nop
	_delay_ms(1);
	EN(0);
 276:	98 b3       	in	r25, 0x18	; 24
 278:	9b 7f       	andi	r25, 0xFB	; 251
 27a:	98 bb       	out	0x18, r25	; 24
 27c:	ef e9       	ldi	r30, 0x9F	; 159
 27e:	ff e0       	ldi	r31, 0x0F	; 15
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_write_data+0x6a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_write_data+0x70>
 286:	00 00       	nop
	_delay_ms(1);

	D7(READBIT(data,3)); // Data bit3  = D7
 288:	83 ff       	sbrs	r24, 3
 28a:	04 c0       	rjmp	.+8      	; 0x294 <LCD_write_data+0x7e>
 28c:	98 b3       	in	r25, 0x18	; 24
 28e:	90 68       	ori	r25, 0x80	; 128
 290:	98 bb       	out	0x18, r25	; 24
 292:	03 c0       	rjmp	.+6      	; 0x29a <LCD_write_data+0x84>
 294:	98 b3       	in	r25, 0x18	; 24
 296:	9f 77       	andi	r25, 0x7F	; 127
 298:	98 bb       	out	0x18, r25	; 24
	D6(READBIT(data,2)); // Data bit2  = D6
 29a:	82 ff       	sbrs	r24, 2
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <LCD_write_data+0x90>
 29e:	98 b3       	in	r25, 0x18	; 24
 2a0:	90 64       	ori	r25, 0x40	; 64
 2a2:	98 bb       	out	0x18, r25	; 24
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_write_data+0x96>
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	9f 7b       	andi	r25, 0xBF	; 191
 2aa:	98 bb       	out	0x18, r25	; 24
	D5(READBIT(data,1)); // Data bit1  = D5
 2ac:	81 ff       	sbrs	r24, 1
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCD_write_data+0xa2>
 2b0:	98 b3       	in	r25, 0x18	; 24
 2b2:	90 62       	ori	r25, 0x20	; 32
 2b4:	98 bb       	out	0x18, r25	; 24
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <LCD_write_data+0xa8>
 2b8:	98 b3       	in	r25, 0x18	; 24
 2ba:	9f 7d       	andi	r25, 0xDF	; 223
 2bc:	98 bb       	out	0x18, r25	; 24
	D4(READBIT(data,0)); // Data bit0  = D4
 2be:	80 ff       	sbrs	r24, 0
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_write_data+0xb4>
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LCD_write_data+0xba>
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	88 bb       	out	0x18, r24	; 24
	EN(1);
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	84 60       	ori	r24, 0x04	; 4
 2d4:	88 bb       	out	0x18, r24	; 24
 2d6:	8f e9       	ldi	r24, 0x9F	; 159
 2d8:	9f e0       	ldi	r25, 0x0F	; 15
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_write_data+0xc4>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_write_data+0xca>
 2e0:	00 00       	nop
	_delay_ms(1);
	EN(0);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	ef e9       	ldi	r30, 0x9F	; 159
 2ea:	ff e0       	ldi	r31, 0x0F	; 15
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_write_data+0xd6>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_write_data+0xdc>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <LCD_write_string>:
* Function Name: LCD_write_data
* Purpose      : write a string on lCD
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(char *data){
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	8c 01       	movw	r16, r24
	uint8_t i =0;
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i] != '\0'){
 300:	03 c0       	rjmp	.+6      	; 0x308 <LCD_write_string+0x12>
		LCD_write_data(data[i]);
 302:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_data>
		i++;
 306:	cf 5f       	subi	r28, 0xFF	; 255
* Parameters   : *data: array of char
* Return value : void
*****************************************************************************/
void LCD_write_string(char *data){
	uint8_t i =0;
	while(data[i] != '\0'){
 308:	f8 01       	movw	r30, r16
 30a:	ec 0f       	add	r30, r28
 30c:	f1 1d       	adc	r31, r1
 30e:	80 81       	ld	r24, Z
 310:	81 11       	cpse	r24, r1
 312:	f7 cf       	rjmp	.-18     	; 0x302 <LCD_write_string+0xc>
		LCD_write_data(data[i]);
		i++;
	}
}
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <LCD_write_num>:
* Function Name: LCD_write_num
* Purpose      : write a number on lCD
* Parameters   : num: number to be written
* Return value : void
*****************************************************************************/
void LCD_write_num(uint32_t num){
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	2a 97       	sbiw	r28, 0x0a	; 10
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) {
 332:	61 15       	cp	r22, r1
 334:	71 05       	cpc	r23, r1
 336:	81 05       	cpc	r24, r1
 338:	91 05       	cpc	r25, r1
 33a:	d1 f4       	brne	.+52     	; 0x370 <LCD_write_num+0x54>
		LCD_write_data('0');
 33c:	80 e3       	ldi	r24, 0x30	; 48
 33e:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_data>
 342:	2c c0       	rjmp	.+88     	; 0x39c <LCD_write_num+0x80>
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
 344:	2a e0       	ldi	r18, 0x0A	; 10
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 350:	e1 e0       	ldi	r30, 0x01	; 1
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	ec 0f       	add	r30, r28
 356:	fd 1f       	adc	r31, r29
 358:	e1 0f       	add	r30, r17
 35a:	f1 1d       	adc	r31, r1
 35c:	17 fd       	sbrc	r17, 7
 35e:	fa 95       	dec	r31
 360:	60 5d       	subi	r22, 0xD0	; 208
 362:	60 83       	st	Z, r22
		num /= 10;
 364:	62 2f       	mov	r22, r18
 366:	73 2f       	mov	r23, r19
 368:	84 2f       	mov	r24, r20
 36a:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_data('0');
		return;
	}		
	
	for(i = 0; num != 0 ;i++){
 36c:	1f 5f       	subi	r17, 0xFF	; 255
 36e:	01 c0       	rjmp	.+2      	; 0x372 <LCD_write_num+0x56>
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	61 15       	cp	r22, r1
 374:	71 05       	cpc	r23, r1
 376:	81 05       	cpc	r24, r1
 378:	91 05       	cpc	r25, r1
 37a:	21 f7       	brne	.-56     	; 0x344 <LCD_write_num+0x28>
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
 37c:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0){
 37e:	0c c0       	rjmp	.+24     	; 0x398 <LCD_write_num+0x7c>
		LCD_write_data(num_arr[i]);
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e1 0f       	add	r30, r17
 38a:	f1 1d       	adc	r31, r1
 38c:	17 fd       	sbrc	r17, 7
 38e:	fa 95       	dec	r31
 390:	80 81       	ld	r24, Z
 392:	0e 94 0b 01 	call	0x216	; 0x216 <LCD_write_data>
		i--;
 396:	11 50       	subi	r17, 0x01	; 1
	for(i = 0; num != 0 ;i++){
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	i--;
	while (i >= 0){
 398:	11 23       	and	r17, r17
 39a:	94 f7       	brge	.-28     	; 0x380 <LCD_write_num+0x64>
		LCD_write_data(num_arr[i]);
		i--;
	}
 39c:	2a 96       	adiw	r28, 0x0a	; 10
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <ctc_isr>:


static void ctc_isr(void){
	static uint8_t count = 0;
	
	if(count == 0 ){
 3b0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 3b4:	81 11       	cpse	r24, r1
 3b6:	0a c0       	rjmp	.+20     	; 0x3cc <ctc_isr+0x1c>
		
		SEVEN_SEG_write_First_Num(Temp);
 3b8:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Temp>
 3bc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <SEVEN_SEG_write_First_Num>
		count ++;
 3c0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 3ca:	08 95       	ret
	}else
	{
		SEVEN_SEG_write_Second_Num(Temp);
 3cc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Temp>
 3d0:	0e 94 b1 02 	call	0x562	; 0x562 <SEVEN_SEG_write_Second_Num>
		count=0;
 3d4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 3d8:	08 95       	ret

000003da <Map>:
{
	uint8_t Min_Current_Range = Min_Temp;
	uint8_t Max_Current_Range = Max_Temp;
	uint8_t Min_Target_Range = Min_Duty;
	uint8_t Max_Target_Range = Max_Duty;
	uint8_t Result  = (temp - Min_Current_Range) * (Max_Target_Range - Min_Target_Range) / (Max_Current_Range - Min_Current_Range) + Min_Target_Range;
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	23 52       	subi	r18, 0x23	; 35
 3e0:	31 09       	sbc	r19, r1
 3e2:	42 e3       	ldi	r20, 0x32	; 50
 3e4:	42 9f       	mul	r20, r18
 3e6:	c0 01       	movw	r24, r0
 3e8:	43 9f       	mul	r20, r19
 3ea:	90 0d       	add	r25, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	6f e0       	ldi	r22, 0x0F	; 15
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	0e 94 84 05 	call	0xb08	; 0xb08 <__divmodhi4>
	return Result;
} 
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	86 0f       	add	r24, r22
 3fa:	08 95       	ret

000003fc <main>:
uint8_t Map(uint8_t temp);
static void ctc_isr(void);

int main(void)
{
	SEVEN_SEG_init();
 3fc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SEVEN_SEG_init>
	timer0_ctc_isr = ctc_isr;
 400:	88 ed       	ldi	r24, 0xD8	; 216
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <timer0_ctc_isr+0x1>
 408:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <timer0_ctc_isr>
	TIMER0_CTC_init(OC_Value);                  
 40c:	8b e9       	ldi	r24, 0x9B	; 155
 40e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <TIMER0_CTC_init>
	LCD_init();
 412:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_init>
    ADC_int();
 416:	0e 94 49 00 	call	0x92	; 0x92 <ADC_int>
	
    while (1) 
    {
		Temp= ((ADC_read()*100) / 206.0 )+ 0.5;
 41a:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 41e:	24 e6       	ldi	r18, 0x64	; 100
 420:	ac 01       	movw	r20, r24
 422:	24 9f       	mul	r18, r20
 424:	c0 01       	movw	r24, r0
 426:	25 9f       	mul	r18, r21
 428:	90 0d       	add	r25, r0
 42a:	11 24       	eor	r1, r1
 42c:	bc 01       	movw	r22, r24
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	4e e4       	ldi	r20, 0x4E	; 78
 43c:	53 e4       	ldi	r21, 0x43	; 67
 43e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	5f e3       	ldi	r21, 0x3F	; 63
 44a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__addsf3>
 44e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fixunssfsi>
 452:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <Temp>
		LCD_write_command(First_line);
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
		LCD_write_string(" Temp = ");
 45c:	80 e6       	ldi	r24, 0x60	; 96
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_string>
		LCD_write_num( Temp);
 464:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <Temp>
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_write_num>
		
		if (Temp >=35)
 472:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Temp>
 476:	83 32       	cpi	r24, 0x23	; 35
 478:	08 f1       	brcs	.+66     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		{
			SETBIT(PORTC,Buzzer_Led_pin);
 47a:	85 b3       	in	r24, 0x15	; 21
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	85 bb       	out	0x15, r24	; 21
			TIMER1_PWM_oc1A_init();
 480:	0e 94 45 03 	call	0x68a	; 0x68a <TIMER1_PWM_oc1A_init>
			TIMER1_PWM_oc1A_duty(Map(Temp));
 484:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Temp>
 488:	0e 94 ed 01 	call	0x3da	; 0x3da <Map>
 48c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <TIMER1_PWM_oc1A_duty>
			LCD_write_command(Second_line);
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
			LCD_write_string(" Duty = ");
 496:	89 e6       	ldi	r24, 0x69	; 105
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_string>
			LCD_write_num( Map(Temp));
 49e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Temp>
 4a2:	0e 94 ed 01 	call	0x3da	; 0x3da <Map>
 4a6:	68 2f       	mov	r22, r24
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_write_num>
			LCD_write_string(" %");
 4b2:	83 e7       	ldi	r24, 0x73	; 115
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_string>
 4ba:	af cf       	rjmp	.-162    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		}else
		{
			CLRBIT(PORTC,Buzzer_Led_pin);
 4bc:	85 b3       	in	r24, 0x15	; 21
 4be:	8f 7b       	andi	r24, 0xBF	; 191
 4c0:	85 bb       	out	0x15, r24	; 21
			TIMER1_PWM_oc1A_stop();
 4c2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <TIMER1_PWM_oc1A_stop>
			LCD_write_command(Second_line);
 4c6:	80 ec       	ldi	r24, 0xC0	; 192
 4c8:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_write_command>
			LCD_write_string(" Duty = ");
 4cc:	89 e6       	ldi	r24, 0x69	; 105
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_string>
			LCD_write_num(0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	cb 01       	movw	r24, r22
 4da:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_write_num>
			LCD_write_string("  %");
 4de:	82 e7       	ldi	r24, 0x72	; 114
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_string>
 4e6:	99 cf       	rjmp	.-206    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>

000004e8 <SEVEN_SEG_init>:
 *  Author: Zakaria yahia 
 */ 
#include "SEVEN_SEG.h"

void SEVEN_SEG_init(void){
	INIT_SEVEN_SEG_PINS;
 4e8:	84 b3       	in	r24, 0x14	; 20
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	84 bb       	out	0x14, r24	; 20
 4ee:	08 95       	ret

000004f0 <SEVEN_SEG_write_First_Num>:
}
void SEVEN_SEG_write_First_Num(uint8_t data){ 
	uint8_t x = data % 10; // 
 4f0:	9d ec       	ldi	r25, 0xCD	; 205
 4f2:	89 9f       	mul	r24, r25
 4f4:	91 2d       	mov	r25, r1
 4f6:	11 24       	eor	r1, r1
 4f8:	96 95       	lsr	r25
 4fa:	96 95       	lsr	r25
 4fc:	96 95       	lsr	r25
 4fe:	99 0f       	add	r25, r25
 500:	29 2f       	mov	r18, r25
 502:	22 0f       	add	r18, r18
 504:	22 0f       	add	r18, r18
 506:	92 0f       	add	r25, r18
 508:	89 1b       	sub	r24, r25
 50a:	98 2f       	mov	r25, r24
	
	EN2(1);
 50c:	85 b3       	in	r24, 0x15	; 21
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	85 bb       	out	0x15, r24	; 21
	EN1(0);
 512:	85 b3       	in	r24, 0x15	; 21
 514:	8f 7e       	andi	r24, 0xEF	; 239
 516:	85 bb       	out	0x15, r24	; 21
	A(READBIT(x,0));
 518:	90 ff       	sbrs	r25, 0
 51a:	04 c0       	rjmp	.+8      	; 0x524 <SEVEN_SEG_write_First_Num+0x34>
 51c:	85 b3       	in	r24, 0x15	; 21
 51e:	81 60       	ori	r24, 0x01	; 1
 520:	85 bb       	out	0x15, r24	; 21
 522:	03 c0       	rjmp	.+6      	; 0x52a <SEVEN_SEG_write_First_Num+0x3a>
 524:	85 b3       	in	r24, 0x15	; 21
 526:	8e 7f       	andi	r24, 0xFE	; 254
 528:	85 bb       	out	0x15, r24	; 21
	B(READBIT(x,1));
 52a:	91 ff       	sbrs	r25, 1
 52c:	04 c0       	rjmp	.+8      	; 0x536 <SEVEN_SEG_write_First_Num+0x46>
 52e:	85 b3       	in	r24, 0x15	; 21
 530:	82 60       	ori	r24, 0x02	; 2
 532:	85 bb       	out	0x15, r24	; 21
 534:	03 c0       	rjmp	.+6      	; 0x53c <SEVEN_SEG_write_First_Num+0x4c>
 536:	85 b3       	in	r24, 0x15	; 21
 538:	8d 7f       	andi	r24, 0xFD	; 253
 53a:	85 bb       	out	0x15, r24	; 21
	C(READBIT(x,2));
 53c:	92 ff       	sbrs	r25, 2
 53e:	04 c0       	rjmp	.+8      	; 0x548 <SEVEN_SEG_write_First_Num+0x58>
 540:	85 b3       	in	r24, 0x15	; 21
 542:	84 60       	ori	r24, 0x04	; 4
 544:	85 bb       	out	0x15, r24	; 21
 546:	03 c0       	rjmp	.+6      	; 0x54e <SEVEN_SEG_write_First_Num+0x5e>
 548:	85 b3       	in	r24, 0x15	; 21
 54a:	8b 7f       	andi	r24, 0xFB	; 251
 54c:	85 bb       	out	0x15, r24	; 21
	D(READBIT(x,3));
 54e:	93 ff       	sbrs	r25, 3
 550:	04 c0       	rjmp	.+8      	; 0x55a <SEVEN_SEG_write_First_Num+0x6a>
 552:	85 b3       	in	r24, 0x15	; 21
 554:	88 60       	ori	r24, 0x08	; 8
 556:	85 bb       	out	0x15, r24	; 21
 558:	08 95       	ret
 55a:	85 b3       	in	r24, 0x15	; 21
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	85 bb       	out	0x15, r24	; 21
 560:	08 95       	ret

00000562 <SEVEN_SEG_write_Second_Num>:
	
	
}

void SEVEN_SEG_write_Second_Num(uint8_t data){
	uint8_t x = data / 10; //
 562:	9d ec       	ldi	r25, 0xCD	; 205
 564:	89 9f       	mul	r24, r25
 566:	81 2d       	mov	r24, r1
 568:	11 24       	eor	r1, r1
 56a:	86 95       	lsr	r24
 56c:	86 95       	lsr	r24
 56e:	86 95       	lsr	r24
	
	EN2(0);
 570:	95 b3       	in	r25, 0x15	; 21
 572:	9f 7d       	andi	r25, 0xDF	; 223
 574:	95 bb       	out	0x15, r25	; 21
	EN1(1);
 576:	95 b3       	in	r25, 0x15	; 21
 578:	90 61       	ori	r25, 0x10	; 16
 57a:	95 bb       	out	0x15, r25	; 21
	A(READBIT(x,0));
 57c:	80 ff       	sbrs	r24, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <SEVEN_SEG_write_Second_Num+0x26>
 580:	95 b3       	in	r25, 0x15	; 21
 582:	91 60       	ori	r25, 0x01	; 1
 584:	95 bb       	out	0x15, r25	; 21
 586:	03 c0       	rjmp	.+6      	; 0x58e <SEVEN_SEG_write_Second_Num+0x2c>
 588:	95 b3       	in	r25, 0x15	; 21
 58a:	9e 7f       	andi	r25, 0xFE	; 254
 58c:	95 bb       	out	0x15, r25	; 21
	B(READBIT(x,1));
 58e:	81 ff       	sbrs	r24, 1
 590:	04 c0       	rjmp	.+8      	; 0x59a <SEVEN_SEG_write_Second_Num+0x38>
 592:	95 b3       	in	r25, 0x15	; 21
 594:	92 60       	ori	r25, 0x02	; 2
 596:	95 bb       	out	0x15, r25	; 21
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <SEVEN_SEG_write_Second_Num+0x3e>
 59a:	95 b3       	in	r25, 0x15	; 21
 59c:	9d 7f       	andi	r25, 0xFD	; 253
 59e:	95 bb       	out	0x15, r25	; 21
	C(READBIT(x,2));
 5a0:	82 ff       	sbrs	r24, 2
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <SEVEN_SEG_write_Second_Num+0x4a>
 5a4:	95 b3       	in	r25, 0x15	; 21
 5a6:	94 60       	ori	r25, 0x04	; 4
 5a8:	95 bb       	out	0x15, r25	; 21
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <SEVEN_SEG_write_Second_Num+0x50>
 5ac:	95 b3       	in	r25, 0x15	; 21
 5ae:	9b 7f       	andi	r25, 0xFB	; 251
 5b0:	95 bb       	out	0x15, r25	; 21
	D(READBIT(x,3));
 5b2:	83 ff       	sbrs	r24, 3
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <SEVEN_SEG_write_Second_Num+0x5c>
 5b6:	85 b3       	in	r24, 0x15	; 21
 5b8:	88 60       	ori	r24, 0x08	; 8
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
 5be:	85 b3       	in	r24, 0x15	; 21
 5c0:	87 7f       	andi	r24, 0xF7	; 247
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	08 95       	ret

000005c6 <TIMER0_CTC_init>:
	SETBIT(DDRB, 3); 
	SETBIT(TCCR0,CS00); 
	SETBIT(TCCR0,FOC0);
	SETBIT(TCCR0,WGM01); 
	SETBIT(TCCR0,COM00);
	OCR0 = oc;
 5c6:	93 b7       	in	r25, 0x33	; 51
 5c8:	91 60       	ori	r25, 0x01	; 1
 5ca:	93 bf       	out	0x33, r25	; 51
 5cc:	93 b7       	in	r25, 0x33	; 51
 5ce:	94 60       	ori	r25, 0x04	; 4
 5d0:	93 bf       	out	0x33, r25	; 51
 5d2:	93 b7       	in	r25, 0x33	; 51
 5d4:	90 68       	ori	r25, 0x80	; 128
 5d6:	93 bf       	out	0x33, r25	; 51
 5d8:	93 b7       	in	r25, 0x33	; 51
 5da:	98 60       	ori	r25, 0x08	; 8
 5dc:	93 bf       	out	0x33, r25	; 51
 5de:	8c bf       	out	0x3c, r24	; 60
 5e0:	89 b7       	in	r24, 0x39	; 57
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	89 bf       	out	0x39, r24	; 57
 5e6:	8f b7       	in	r24, 0x3f	; 63
 5e8:	80 68       	ori	r24, 0x80	; 128
 5ea:	8f bf       	out	0x3f, r24	; 63
 5ec:	08 95       	ret

000005ee <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	timer0_ovf_isr();
 610:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <timer0_ovf_isr>
 614:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <timer0_ovf_isr+0x1>
 618:	09 95       	icall
}
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <__vector_10>:

ISR(TIMER0_COMP_vect){
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	2f 93       	push	r18
 648:	3f 93       	push	r19
 64a:	4f 93       	push	r20
 64c:	5f 93       	push	r21
 64e:	6f 93       	push	r22
 650:	7f 93       	push	r23
 652:	8f 93       	push	r24
 654:	9f 93       	push	r25
 656:	af 93       	push	r26
 658:	bf 93       	push	r27
 65a:	ef 93       	push	r30
 65c:	ff 93       	push	r31
	timer0_ctc_isr();
 65e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <timer0_ctc_isr>
 662:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <timer0_ctc_isr+0x1>
 666:	09 95       	icall
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <TIMER1_PWM_oc1A_init>:
* Purpose      :init timer1 pin oc1a PWM (fast freq, 10bit, non inverting, no prescaler)
* Parameters   : void
* Return value : void
*****************************************************************************/
void TIMER1_PWM_oc1A_init(void){
	SETBIT(DDRD,5);
 68a:	81 b3       	in	r24, 0x11	; 17
 68c:	80 62       	ori	r24, 0x20	; 32
 68e:	81 bb       	out	0x11, r24	; 17
	SETBIT(TCCR1A,COM1A1); // set non inverting mode
 690:	8f b5       	in	r24, 0x2f	; 47
 692:	80 68       	ori	r24, 0x80	; 128
 694:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1A,WGM10);  // set FAST frq 10bit
 696:	8f b5       	in	r24, 0x2f	; 47
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1A,WGM11);  // set FAST frq 10bit
 69c:	8f b5       	in	r24, 0x2f	; 47
 69e:	82 60       	ori	r24, 0x02	; 2
 6a0:	8f bd       	out	0x2f, r24	; 47
	SETBIT(TCCR1B,WGM12);  // set FAST frq 10bit
 6a2:	8e b5       	in	r24, 0x2e	; 46
 6a4:	88 60       	ori	r24, 0x08	; 8
 6a6:	8e bd       	out	0x2e, r24	; 46
	SETBIT(TCCR1B,CS10);   // No prescaler	
 6a8:	8e b5       	in	r24, 0x2e	; 46
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	8e bd       	out	0x2e, r24	; 46
 6ae:	08 95       	ret

000006b0 <TIMER1_PWM_oc1A_duty>:
duty = (100 / 1023) * OCR1A


*/
void TIMER1_PWM_oc1A_duty(uint8_t duty ){
	OCR1A = duty * 10.23;
 6b0:	68 2f       	mov	r22, r24
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 8b 04 	call	0x916	; 0x916 <__floatsisf>
 6bc:	24 e1       	ldi	r18, 0x14	; 20
 6be:	3e ea       	ldi	r19, 0xAE	; 174
 6c0:	43 e2       	ldi	r20, 0x23	; 35
 6c2:	51 e4       	ldi	r21, 0x41	; 65
 6c4:	0e 94 17 05 	call	0xa2e	; 0xa2e <__mulsf3>
 6c8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fixunssfsi>
 6cc:	7b bd       	out	0x2b, r23	; 43
 6ce:	6a bd       	out	0x2a, r22	; 42
 6d0:	08 95       	ret

000006d2 <TIMER1_PWM_oc1A_stop>:
}

void TIMER1_PWM_oc1A_stop(void){
	OCR1A =0;
 6d2:	1b bc       	out	0x2b, r1	; 43
 6d4:	1a bc       	out	0x2a, r1	; 42
	CLRBIT(TCCR1A,COM1A1); // set non inverting mode
 6d6:	8f b5       	in	r24, 0x2f	; 47
 6d8:	8f 77       	andi	r24, 0x7F	; 127
 6da:	8f bd       	out	0x2f, r24	; 47
	CLRBIT(TCCR1A,WGM10);  // set FAST frq 10bit
 6dc:	8f b5       	in	r24, 0x2f	; 47
 6de:	8e 7f       	andi	r24, 0xFE	; 254
 6e0:	8f bd       	out	0x2f, r24	; 47
	CLRBIT(TCCR1A,WGM11);  // set FAST frq 10bit
 6e2:	8f b5       	in	r24, 0x2f	; 47
 6e4:	8d 7f       	andi	r24, 0xFD	; 253
 6e6:	8f bd       	out	0x2f, r24	; 47
	CLRBIT(TCCR1B,WGM12);  // set FAST frq 10bit
 6e8:	8e b5       	in	r24, 0x2e	; 46
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	8e bd       	out	0x2e, r24	; 46
	CLRBIT(TCCR1B,CS10);   // No prescaler
 6ee:	8e b5       	in	r24, 0x2e	; 46
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	8e bd       	out	0x2e, r24	; 46
 6f4:	08 95       	ret

000006f6 <__subsf3>:
 6f6:	50 58       	subi	r21, 0x80	; 128

000006f8 <__addsf3>:
 6f8:	bb 27       	eor	r27, r27
 6fa:	aa 27       	eor	r26, r26
 6fc:	0e 94 93 03 	call	0x726	; 0x726 <__addsf3x>
 700:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_round>
 704:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscA>
 708:	38 f0       	brcs	.+14     	; 0x718 <__addsf3+0x20>
 70a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscB>
 70e:	20 f0       	brcs	.+8      	; 0x718 <__addsf3+0x20>
 710:	39 f4       	brne	.+14     	; 0x720 <__addsf3+0x28>
 712:	9f 3f       	cpi	r25, 0xFF	; 255
 714:	19 f4       	brne	.+6      	; 0x71c <__addsf3+0x24>
 716:	26 f4       	brtc	.+8      	; 0x720 <__addsf3+0x28>
 718:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_nan>
 71c:	0e f4       	brtc	.+2      	; 0x720 <__addsf3+0x28>
 71e:	e0 95       	com	r30
 720:	e7 fb       	bst	r30, 7
 722:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_inf>

00000726 <__addsf3x>:
 726:	e9 2f       	mov	r30, r25
 728:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_split3>
 72c:	58 f3       	brcs	.-42     	; 0x704 <__addsf3+0xc>
 72e:	ba 17       	cp	r27, r26
 730:	62 07       	cpc	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	95 07       	cpc	r25, r21
 738:	20 f0       	brcs	.+8      	; 0x742 <__addsf3x+0x1c>
 73a:	79 f4       	brne	.+30     	; 0x75a <__addsf3x+0x34>
 73c:	a6 f5       	brtc	.+104    	; 0x7a6 <__addsf3x+0x80>
 73e:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_zero>
 742:	0e f4       	brtc	.+2      	; 0x746 <__addsf3x+0x20>
 744:	e0 95       	com	r30
 746:	0b 2e       	mov	r0, r27
 748:	ba 2f       	mov	r27, r26
 74a:	a0 2d       	mov	r26, r0
 74c:	0b 01       	movw	r0, r22
 74e:	b9 01       	movw	r22, r18
 750:	90 01       	movw	r18, r0
 752:	0c 01       	movw	r0, r24
 754:	ca 01       	movw	r24, r20
 756:	a0 01       	movw	r20, r0
 758:	11 24       	eor	r1, r1
 75a:	ff 27       	eor	r31, r31
 75c:	59 1b       	sub	r21, r25
 75e:	99 f0       	breq	.+38     	; 0x786 <__addsf3x+0x60>
 760:	59 3f       	cpi	r21, 0xF9	; 249
 762:	50 f4       	brcc	.+20     	; 0x778 <__addsf3x+0x52>
 764:	50 3e       	cpi	r21, 0xE0	; 224
 766:	68 f1       	brcs	.+90     	; 0x7c2 <__addsf3x+0x9c>
 768:	1a 16       	cp	r1, r26
 76a:	f0 40       	sbci	r31, 0x00	; 0
 76c:	a2 2f       	mov	r26, r18
 76e:	23 2f       	mov	r18, r19
 770:	34 2f       	mov	r19, r20
 772:	44 27       	eor	r20, r20
 774:	58 5f       	subi	r21, 0xF8	; 248
 776:	f3 cf       	rjmp	.-26     	; 0x75e <__addsf3x+0x38>
 778:	46 95       	lsr	r20
 77a:	37 95       	ror	r19
 77c:	27 95       	ror	r18
 77e:	a7 95       	ror	r26
 780:	f0 40       	sbci	r31, 0x00	; 0
 782:	53 95       	inc	r21
 784:	c9 f7       	brne	.-14     	; 0x778 <__addsf3x+0x52>
 786:	7e f4       	brtc	.+30     	; 0x7a6 <__addsf3x+0x80>
 788:	1f 16       	cp	r1, r31
 78a:	ba 0b       	sbc	r27, r26
 78c:	62 0b       	sbc	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	ba f0       	brmi	.+46     	; 0x7c2 <__addsf3x+0x9c>
 794:	91 50       	subi	r25, 0x01	; 1
 796:	a1 f0       	breq	.+40     	; 0x7c0 <__addsf3x+0x9a>
 798:	ff 0f       	add	r31, r31
 79a:	bb 1f       	adc	r27, r27
 79c:	66 1f       	adc	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	c2 f7       	brpl	.-16     	; 0x794 <__addsf3x+0x6e>
 7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <__addsf3x+0x9c>
 7a6:	ba 0f       	add	r27, r26
 7a8:	62 1f       	adc	r22, r18
 7aa:	73 1f       	adc	r23, r19
 7ac:	84 1f       	adc	r24, r20
 7ae:	48 f4       	brcc	.+18     	; 0x7c2 <__addsf3x+0x9c>
 7b0:	87 95       	ror	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9e 3f       	cpi	r25, 0xFE	; 254
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <__addsf3x+0x9a>
 7be:	b0 cf       	rjmp	.-160    	; 0x720 <__addsf3+0x28>
 7c0:	93 95       	inc	r25
 7c2:	88 0f       	add	r24, r24
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <__addsf3x+0xa2>
 7c6:	99 27       	eor	r25, r25
 7c8:	ee 0f       	add	r30, r30
 7ca:	97 95       	ror	r25
 7cc:	87 95       	ror	r24
 7ce:	08 95       	ret

000007d0 <__divsf3>:
 7d0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3x>
 7d4:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_round>
 7d8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscB>
 7dc:	58 f0       	brcs	.+22     	; 0x7f4 <__divsf3+0x24>
 7de:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscA>
 7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__divsf3+0x24>
 7e4:	29 f4       	brne	.+10     	; 0x7f0 <__divsf3+0x20>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <__divsf3+0x24>
 7ea:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_inf>
 7ee:	51 11       	cpse	r21, r1
 7f0:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_szero>
 7f4:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_nan>

000007f8 <__divsf3x>:
 7f8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_split3>
 7fc:	68 f3       	brcs	.-38     	; 0x7d8 <__divsf3+0x8>

000007fe <__divsf3_pse>:
 7fe:	99 23       	and	r25, r25
 800:	b1 f3       	breq	.-20     	; 0x7ee <__divsf3+0x1e>
 802:	55 23       	and	r21, r21
 804:	91 f3       	breq	.-28     	; 0x7ea <__divsf3+0x1a>
 806:	95 1b       	sub	r25, r21
 808:	55 0b       	sbc	r21, r21
 80a:	bb 27       	eor	r27, r27
 80c:	aa 27       	eor	r26, r26
 80e:	62 17       	cp	r22, r18
 810:	73 07       	cpc	r23, r19
 812:	84 07       	cpc	r24, r20
 814:	38 f0       	brcs	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	5f 4f       	sbci	r21, 0xFF	; 255
 81a:	22 0f       	add	r18, r18
 81c:	33 1f       	adc	r19, r19
 81e:	44 1f       	adc	r20, r20
 820:	aa 1f       	adc	r26, r26
 822:	a9 f3       	breq	.-22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 824:	35 d0       	rcall	.+106    	; 0x890 <__stack+0x31>
 826:	0e 2e       	mov	r0, r30
 828:	3a f0       	brmi	.+14     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82a:	e0 e8       	ldi	r30, 0x80	; 128
 82c:	32 d0       	rcall	.+100    	; 0x892 <__stack+0x33>
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	e6 95       	lsr	r30
 834:	00 1c       	adc	r0, r0
 836:	ca f7       	brpl	.-14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 838:	2b d0       	rcall	.+86     	; 0x890 <__stack+0x31>
 83a:	fe 2f       	mov	r31, r30
 83c:	29 d0       	rcall	.+82     	; 0x890 <__stack+0x31>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	bb 1f       	adc	r27, r27
 846:	26 17       	cp	r18, r22
 848:	37 07       	cpc	r19, r23
 84a:	48 07       	cpc	r20, r24
 84c:	ab 07       	cpc	r26, r27
 84e:	b0 e8       	ldi	r27, 0x80	; 128
 850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 852:	bb 0b       	sbc	r27, r27
 854:	80 2d       	mov	r24, r0
 856:	bf 01       	movw	r22, r30
 858:	ff 27       	eor	r31, r31
 85a:	93 58       	subi	r25, 0x83	; 131
 85c:	5f 4f       	sbci	r21, 0xFF	; 255
 85e:	3a f0       	brmi	.+14     	; 0x86e <__stack+0xf>
 860:	9e 3f       	cpi	r25, 0xFE	; 254
 862:	51 05       	cpc	r21, r1
 864:	78 f0       	brcs	.+30     	; 0x884 <__stack+0x25>
 866:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_inf>
 86a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_szero>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	e4 f3       	brlt	.-8      	; 0x86a <__stack+0xb>
 872:	98 3e       	cpi	r25, 0xE8	; 232
 874:	d4 f3       	brlt	.-12     	; 0x86a <__stack+0xb>
 876:	86 95       	lsr	r24
 878:	77 95       	ror	r23
 87a:	67 95       	ror	r22
 87c:	b7 95       	ror	r27
 87e:	f7 95       	ror	r31
 880:	9f 5f       	subi	r25, 0xFF	; 255
 882:	c9 f7       	brne	.-14     	; 0x876 <__stack+0x17>
 884:	88 0f       	add	r24, r24
 886:	91 1d       	adc	r25, r1
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret
 890:	e1 e0       	ldi	r30, 0x01	; 1
 892:	66 0f       	add	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	bb 1f       	adc	r27, r27
 89a:	62 17       	cp	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	ba 07       	cpc	r27, r26
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__stack+0x4d>
 8a4:	62 1b       	sub	r22, r18
 8a6:	73 0b       	sbc	r23, r19
 8a8:	84 0b       	sbc	r24, r20
 8aa:	ba 0b       	sbc	r27, r26
 8ac:	ee 1f       	adc	r30, r30
 8ae:	88 f7       	brcc	.-30     	; 0x892 <__stack+0x33>
 8b0:	e0 95       	com	r30
 8b2:	08 95       	ret

000008b4 <__fixunssfsi>:
 8b4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__fp_splitA>
 8b8:	88 f0       	brcs	.+34     	; 0x8dc <__fixunssfsi+0x28>
 8ba:	9f 57       	subi	r25, 0x7F	; 127
 8bc:	98 f0       	brcs	.+38     	; 0x8e4 <__fixunssfsi+0x30>
 8be:	b9 2f       	mov	r27, r25
 8c0:	99 27       	eor	r25, r25
 8c2:	b7 51       	subi	r27, 0x17	; 23
 8c4:	b0 f0       	brcs	.+44     	; 0x8f2 <__fixunssfsi+0x3e>
 8c6:	e1 f0       	breq	.+56     	; 0x900 <__fixunssfsi+0x4c>
 8c8:	66 0f       	add	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	1a f0       	brmi	.+6      	; 0x8d8 <__fixunssfsi+0x24>
 8d2:	ba 95       	dec	r27
 8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__fixunssfsi+0x14>
 8d6:	14 c0       	rjmp	.+40     	; 0x900 <__fixunssfsi+0x4c>
 8d8:	b1 30       	cpi	r27, 0x01	; 1
 8da:	91 f0       	breq	.+36     	; 0x900 <__fixunssfsi+0x4c>
 8dc:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_zero>
 8e0:	b1 e0       	ldi	r27, 0x01	; 1
 8e2:	08 95       	ret
 8e4:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__fp_zero>
 8e8:	67 2f       	mov	r22, r23
 8ea:	78 2f       	mov	r23, r24
 8ec:	88 27       	eor	r24, r24
 8ee:	b8 5f       	subi	r27, 0xF8	; 248
 8f0:	39 f0       	breq	.+14     	; 0x900 <__fixunssfsi+0x4c>
 8f2:	b9 3f       	cpi	r27, 0xF9	; 249
 8f4:	cc f3       	brlt	.-14     	; 0x8e8 <__fixunssfsi+0x34>
 8f6:	86 95       	lsr	r24
 8f8:	77 95       	ror	r23
 8fa:	67 95       	ror	r22
 8fc:	b3 95       	inc	r27
 8fe:	d9 f7       	brne	.-10     	; 0x8f6 <__fixunssfsi+0x42>
 900:	3e f4       	brtc	.+14     	; 0x910 <__fixunssfsi+0x5c>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__floatunsisf>:
 912:	e8 94       	clt
 914:	09 c0       	rjmp	.+18     	; 0x928 <__floatsisf+0x12>

00000916 <__floatsisf>:
 916:	97 fb       	bst	r25, 7
 918:	3e f4       	brtc	.+14     	; 0x928 <__floatsisf+0x12>
 91a:	90 95       	com	r25
 91c:	80 95       	com	r24
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	99 23       	and	r25, r25
 92a:	a9 f0       	breq	.+42     	; 0x956 <__floatsisf+0x40>
 92c:	f9 2f       	mov	r31, r25
 92e:	96 e9       	ldi	r25, 0x96	; 150
 930:	bb 27       	eor	r27, r27
 932:	93 95       	inc	r25
 934:	f6 95       	lsr	r31
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f1 11       	cpse	r31, r1
 940:	f8 cf       	rjmp	.-16     	; 0x932 <__floatsisf+0x1c>
 942:	fa f4       	brpl	.+62     	; 0x982 <__floatsisf+0x6c>
 944:	bb 0f       	add	r27, r27
 946:	11 f4       	brne	.+4      	; 0x94c <__floatsisf+0x36>
 948:	60 ff       	sbrs	r22, 0
 94a:	1b c0       	rjmp	.+54     	; 0x982 <__floatsisf+0x6c>
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	16 c0       	rjmp	.+44     	; 0x982 <__floatsisf+0x6c>
 956:	88 23       	and	r24, r24
 958:	11 f0       	breq	.+4      	; 0x95e <__floatsisf+0x48>
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	11 c0       	rjmp	.+34     	; 0x980 <__floatsisf+0x6a>
 95e:	77 23       	and	r23, r23
 960:	21 f0       	breq	.+8      	; 0x96a <__floatsisf+0x54>
 962:	9e e8       	ldi	r25, 0x8E	; 142
 964:	87 2f       	mov	r24, r23
 966:	76 2f       	mov	r23, r22
 968:	05 c0       	rjmp	.+10     	; 0x974 <__floatsisf+0x5e>
 96a:	66 23       	and	r22, r22
 96c:	71 f0       	breq	.+28     	; 0x98a <__floatsisf+0x74>
 96e:	96 e8       	ldi	r25, 0x86	; 134
 970:	86 2f       	mov	r24, r22
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	2a f0       	brmi	.+10     	; 0x982 <__floatsisf+0x6c>
 978:	9a 95       	dec	r25
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	da f7       	brpl	.-10     	; 0x978 <__floatsisf+0x62>
 982:	88 0f       	add	r24, r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__fp_inf>:
 98c:	97 f9       	bld	r25, 7
 98e:	9f 67       	ori	r25, 0x7F	; 127
 990:	80 e8       	ldi	r24, 0x80	; 128
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	60 e0       	ldi	r22, 0x00	; 0
 996:	08 95       	ret

00000998 <__fp_nan>:
 998:	9f ef       	ldi	r25, 0xFF	; 255
 99a:	80 ec       	ldi	r24, 0xC0	; 192
 99c:	08 95       	ret

0000099e <__fp_pscA>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	16 16       	cp	r1, r22
 9a4:	17 06       	cpc	r1, r23
 9a6:	18 06       	cpc	r1, r24
 9a8:	09 06       	cpc	r0, r25
 9aa:	08 95       	ret

000009ac <__fp_pscB>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	12 16       	cp	r1, r18
 9b2:	13 06       	cpc	r1, r19
 9b4:	14 06       	cpc	r1, r20
 9b6:	05 06       	cpc	r0, r21
 9b8:	08 95       	ret

000009ba <__fp_round>:
 9ba:	09 2e       	mov	r0, r25
 9bc:	03 94       	inc	r0
 9be:	00 0c       	add	r0, r0
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <__fp_round+0xc>
 9c2:	88 23       	and	r24, r24
 9c4:	52 f0       	brmi	.+20     	; 0x9da <__fp_round+0x20>
 9c6:	bb 0f       	add	r27, r27
 9c8:	40 f4       	brcc	.+16     	; 0x9da <__fp_round+0x20>
 9ca:	bf 2b       	or	r27, r31
 9cc:	11 f4       	brne	.+4      	; 0x9d2 <__fp_round+0x18>
 9ce:	60 ff       	sbrs	r22, 0
 9d0:	04 c0       	rjmp	.+8      	; 0x9da <__fp_round+0x20>
 9d2:	6f 5f       	subi	r22, 0xFF	; 255
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	08 95       	ret

000009dc <__fp_split3>:
 9dc:	57 fd       	sbrc	r21, 7
 9de:	90 58       	subi	r25, 0x80	; 128
 9e0:	44 0f       	add	r20, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	59 f0       	breq	.+22     	; 0x9fc <__fp_splitA+0x10>
 9e6:	5f 3f       	cpi	r21, 0xFF	; 255
 9e8:	71 f0       	breq	.+28     	; 0xa06 <__fp_splitA+0x1a>
 9ea:	47 95       	ror	r20

000009ec <__fp_splitA>:
 9ec:	88 0f       	add	r24, r24
 9ee:	97 fb       	bst	r25, 7
 9f0:	99 1f       	adc	r25, r25
 9f2:	61 f0       	breq	.+24     	; 0xa0c <__fp_splitA+0x20>
 9f4:	9f 3f       	cpi	r25, 0xFF	; 255
 9f6:	79 f0       	breq	.+30     	; 0xa16 <__fp_splitA+0x2a>
 9f8:	87 95       	ror	r24
 9fa:	08 95       	ret
 9fc:	12 16       	cp	r1, r18
 9fe:	13 06       	cpc	r1, r19
 a00:	14 06       	cpc	r1, r20
 a02:	55 1f       	adc	r21, r21
 a04:	f2 cf       	rjmp	.-28     	; 0x9ea <__fp_split3+0xe>
 a06:	46 95       	lsr	r20
 a08:	f1 df       	rcall	.-30     	; 0x9ec <__fp_splitA>
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <__fp_splitA+0x30>
 a0c:	16 16       	cp	r1, r22
 a0e:	17 06       	cpc	r1, r23
 a10:	18 06       	cpc	r1, r24
 a12:	99 1f       	adc	r25, r25
 a14:	f1 cf       	rjmp	.-30     	; 0x9f8 <__fp_splitA+0xc>
 a16:	86 95       	lsr	r24
 a18:	71 05       	cpc	r23, r1
 a1a:	61 05       	cpc	r22, r1
 a1c:	08 94       	sec
 a1e:	08 95       	ret

00000a20 <__fp_zero>:
 a20:	e8 94       	clt

00000a22 <__fp_szero>:
 a22:	bb 27       	eor	r27, r27
 a24:	66 27       	eor	r22, r22
 a26:	77 27       	eor	r23, r23
 a28:	cb 01       	movw	r24, r22
 a2a:	97 f9       	bld	r25, 7
 a2c:	08 95       	ret

00000a2e <__mulsf3>:
 a2e:	0e 94 2a 05 	call	0xa54	; 0xa54 <__mulsf3x>
 a32:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_round>
 a36:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscA>
 a3a:	38 f0       	brcs	.+14     	; 0xa4a <__mulsf3+0x1c>
 a3c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_pscB>
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__mulsf3+0x1c>
 a42:	95 23       	and	r25, r21
 a44:	11 f0       	breq	.+4      	; 0xa4a <__mulsf3+0x1c>
 a46:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_inf>
 a4a:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_nan>
 a4e:	11 24       	eor	r1, r1
 a50:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_szero>

00000a54 <__mulsf3x>:
 a54:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_split3>
 a58:	70 f3       	brcs	.-36     	; 0xa36 <__mulsf3+0x8>

00000a5a <__mulsf3_pse>:
 a5a:	95 9f       	mul	r25, r21
 a5c:	c1 f3       	breq	.-16     	; 0xa4e <__mulsf3+0x20>
 a5e:	95 0f       	add	r25, r21
 a60:	50 e0       	ldi	r21, 0x00	; 0
 a62:	55 1f       	adc	r21, r21
 a64:	62 9f       	mul	r22, r18
 a66:	f0 01       	movw	r30, r0
 a68:	72 9f       	mul	r23, r18
 a6a:	bb 27       	eor	r27, r27
 a6c:	f0 0d       	add	r31, r0
 a6e:	b1 1d       	adc	r27, r1
 a70:	63 9f       	mul	r22, r19
 a72:	aa 27       	eor	r26, r26
 a74:	f0 0d       	add	r31, r0
 a76:	b1 1d       	adc	r27, r1
 a78:	aa 1f       	adc	r26, r26
 a7a:	64 9f       	mul	r22, r20
 a7c:	66 27       	eor	r22, r22
 a7e:	b0 0d       	add	r27, r0
 a80:	a1 1d       	adc	r26, r1
 a82:	66 1f       	adc	r22, r22
 a84:	82 9f       	mul	r24, r18
 a86:	22 27       	eor	r18, r18
 a88:	b0 0d       	add	r27, r0
 a8a:	a1 1d       	adc	r26, r1
 a8c:	62 1f       	adc	r22, r18
 a8e:	73 9f       	mul	r23, r19
 a90:	b0 0d       	add	r27, r0
 a92:	a1 1d       	adc	r26, r1
 a94:	62 1f       	adc	r22, r18
 a96:	83 9f       	mul	r24, r19
 a98:	a0 0d       	add	r26, r0
 a9a:	61 1d       	adc	r22, r1
 a9c:	22 1f       	adc	r18, r18
 a9e:	74 9f       	mul	r23, r20
 aa0:	33 27       	eor	r19, r19
 aa2:	a0 0d       	add	r26, r0
 aa4:	61 1d       	adc	r22, r1
 aa6:	23 1f       	adc	r18, r19
 aa8:	84 9f       	mul	r24, r20
 aaa:	60 0d       	add	r22, r0
 aac:	21 1d       	adc	r18, r1
 aae:	82 2f       	mov	r24, r18
 ab0:	76 2f       	mov	r23, r22
 ab2:	6a 2f       	mov	r22, r26
 ab4:	11 24       	eor	r1, r1
 ab6:	9f 57       	subi	r25, 0x7F	; 127
 ab8:	50 40       	sbci	r21, 0x00	; 0
 aba:	9a f0       	brmi	.+38     	; 0xae2 <__mulsf3_pse+0x88>
 abc:	f1 f0       	breq	.+60     	; 0xafa <__mulsf3_pse+0xa0>
 abe:	88 23       	and	r24, r24
 ac0:	4a f0       	brmi	.+18     	; 0xad4 <__mulsf3_pse+0x7a>
 ac2:	ee 0f       	add	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	bb 1f       	adc	r27, r27
 ac8:	66 1f       	adc	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	91 50       	subi	r25, 0x01	; 1
 ad0:	50 40       	sbci	r21, 0x00	; 0
 ad2:	a9 f7       	brne	.-22     	; 0xabe <__mulsf3_pse+0x64>
 ad4:	9e 3f       	cpi	r25, 0xFE	; 254
 ad6:	51 05       	cpc	r21, r1
 ad8:	80 f0       	brcs	.+32     	; 0xafa <__mulsf3_pse+0xa0>
 ada:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_inf>
 ade:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_szero>
 ae2:	5f 3f       	cpi	r21, 0xFF	; 255
 ae4:	e4 f3       	brlt	.-8      	; 0xade <__mulsf3_pse+0x84>
 ae6:	98 3e       	cpi	r25, 0xE8	; 232
 ae8:	d4 f3       	brlt	.-12     	; 0xade <__mulsf3_pse+0x84>
 aea:	86 95       	lsr	r24
 aec:	77 95       	ror	r23
 aee:	67 95       	ror	r22
 af0:	b7 95       	ror	r27
 af2:	f7 95       	ror	r31
 af4:	e7 95       	ror	r30
 af6:	9f 5f       	subi	r25, 0xFF	; 255
 af8:	c1 f7       	brne	.-16     	; 0xaea <__mulsf3_pse+0x90>
 afa:	fe 2b       	or	r31, r30
 afc:	88 0f       	add	r24, r24
 afe:	91 1d       	adc	r25, r1
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__divmodhi4>:
 b08:	97 fb       	bst	r25, 7
 b0a:	07 2e       	mov	r0, r23
 b0c:	16 f4       	brtc	.+4      	; 0xb12 <__divmodhi4+0xa>
 b0e:	00 94       	com	r0
 b10:	07 d0       	rcall	.+14     	; 0xb20 <__divmodhi4_neg1>
 b12:	77 fd       	sbrc	r23, 7
 b14:	09 d0       	rcall	.+18     	; 0xb28 <__divmodhi4_neg2>
 b16:	0e 94 ba 05 	call	0xb74	; 0xb74 <__udivmodhi4>
 b1a:	07 fc       	sbrc	r0, 7
 b1c:	05 d0       	rcall	.+10     	; 0xb28 <__divmodhi4_neg2>
 b1e:	3e f4       	brtc	.+14     	; 0xb2e <__divmodhi4_exit>

00000b20 <__divmodhi4_neg1>:
 b20:	90 95       	com	r25
 b22:	81 95       	neg	r24
 b24:	9f 4f       	sbci	r25, 0xFF	; 255
 b26:	08 95       	ret

00000b28 <__divmodhi4_neg2>:
 b28:	70 95       	com	r23
 b2a:	61 95       	neg	r22
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b2e <__divmodhi4_exit>:
 b2e:	08 95       	ret

00000b30 <__udivmodsi4>:
 b30:	a1 e2       	ldi	r26, 0x21	; 33
 b32:	1a 2e       	mov	r1, r26
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	fd 01       	movw	r30, r26
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <__udivmodsi4_ep>

00000b3c <__udivmodsi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	ee 1f       	adc	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	a2 17       	cp	r26, r18
 b46:	b3 07       	cpc	r27, r19
 b48:	e4 07       	cpc	r30, r20
 b4a:	f5 07       	cpc	r31, r21
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__udivmodsi4_ep>
 b4e:	a2 1b       	sub	r26, r18
 b50:	b3 0b       	sbc	r27, r19
 b52:	e4 0b       	sbc	r30, r20
 b54:	f5 0b       	sbc	r31, r21

00000b56 <__udivmodsi4_ep>:
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a 94       	dec	r1
 b60:	69 f7       	brne	.-38     	; 0xb3c <__udivmodsi4_loop>
 b62:	60 95       	com	r22
 b64:	70 95       	com	r23
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret

00000b74 <__udivmodhi4>:
 b74:	aa 1b       	sub	r26, r26
 b76:	bb 1b       	sub	r27, r27
 b78:	51 e1       	ldi	r21, 0x11	; 17
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <__udivmodhi4_ep>

00000b7c <__udivmodhi4_loop>:
 b7c:	aa 1f       	adc	r26, r26
 b7e:	bb 1f       	adc	r27, r27
 b80:	a6 17       	cp	r26, r22
 b82:	b7 07       	cpc	r27, r23
 b84:	10 f0       	brcs	.+4      	; 0xb8a <__udivmodhi4_ep>
 b86:	a6 1b       	sub	r26, r22
 b88:	b7 0b       	sbc	r27, r23

00000b8a <__udivmodhi4_ep>:
 b8a:	88 1f       	adc	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	5a 95       	dec	r21
 b90:	a9 f7       	brne	.-22     	; 0xb7c <__udivmodhi4_loop>
 b92:	80 95       	com	r24
 b94:	90 95       	com	r25
 b96:	bc 01       	movw	r22, r24
 b98:	cd 01       	movw	r24, r26
 b9a:	08 95       	ret

00000b9c <_exit>:
 b9c:	f8 94       	cli

00000b9e <__stop_program>:
 b9e:	ff cf       	rjmp	.-2      	; 0xb9e <__stop_program>
